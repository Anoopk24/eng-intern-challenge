import sys


class Constants:
    """
    Represents a class of constants including mappings from english to braille and vice versa.

    Braille to english mappings are generated by switching the keys and values of english mappings
    and splitting up numbers and alphabet characters + space character.
    """

    CAPITAL_FOLLOWS: str = ".....O"
    NUMBER_FOLLOWS: str = ".O.OOO"

    ENGLISH_TO_BRAILLE: dict = {
        "a": "O.....",
        "b": "O.O...",
        "c": "OO....",
        "d": "OO.O..",
        "e": "O..O..",
        "f": "OOO...",
        "g": "OOOO..",
        "h": "O.OO..",
        "i": ".OO...",
        "j": ".OOO..",
        "k": "O...O.",
        "l": "O.O.O.",
        "m": "OO..O.",
        "n": "OO.OO.",
        "o": "O..OO.",
        "p": "OOO.O.",
        "q": "OOOOO.",
        "r": "O.OOO.",
        "s": ".OO.O.",
        "t": ".OOOO.",
        "u": "O...OO",
        "v": "O.O.OO",
        "w": ".OOO.O",
        "x": "OO..OO",
        "y": "OO.OOO",
        "z": "O..OOO",
        "1": "O.....",
        "2": "O.O...",
        "3": "OO....",
        "4": "OO.O..",
        "5": "O..O..",
        "6": "OOO...",
        "7": "OOOO..",
        "8": "O.OO..",
        "9": ".OO...",
        "0": ".OOO..",
        " ": "......",
    }

    BRAILLE_TO_ENGLISH_ALPHABET: dict = {value: key for key, value in ENGLISH_TO_BRAILLE.items() if not key.isdigit()}
    BRAILLE_TO_ENGLISH_NUMBERS: dict = {value: key for key, value in ENGLISH_TO_BRAILLE.items() if key.isdigit()}


class Translator:
    """
    Represents a class with translation methods and an attribute to contain the given input text.
    """

    input_text: str

    def __init__(self) -> None:
        """
        @description Instantiates the class by parsing the command-line arguments, separating them by spaces
        and setting them equal to the input_text attribute.
        """
        self.input_text = " ".join(sys.argv[1:])
        self.constants = Constants()

    def is_english_text(self) -> bool:
        """
        @args None

        @returns bool: Boolean that represents whether the input_text attribute is english or braille.

        @description Verifies whether the current input_text attribute is english or braille text by
        removing spaces and then confirming for alphanumeric values since braille text
        contains periods which are non-alphanumeric.
        """
        input_text_no_spaces = self.input_text.replace(" ", "")
        return input_text_no_spaces.isalnum()

    def convert_english_to_braille(self) -> str:
        """
        @args None

        @returns str: String containing the resulting braille text after conversion.

        @description Converts the current english input_text attribute into braille text
        accounting for any numbers and capitals.
        """
        braille_text = ""
        iterating_on_digits = False
        for character in self.input_text:
            if character.isdigit() and not iterating_on_digits:
                braille_text += self.constants.NUMBER_FOLLOWS
                iterating_on_digits = True
            elif not character.isdigit():
                if iterating_on_digits:
                    iterating_on_digits = False
                if character.isupper():
                    braille_text += self.constants.CAPITAL_FOLLOWS

            braille_text += self.constants.ENGLISH_TO_BRAILLE[character.lower()]

        return braille_text

    def convert_braille_to_english(self) -> str:
        """
        @args None

        @returns str: String containing the resulting english text after conversion.

        @description Converts the current braille input_text attribute into english text
        accounting for any 'number follows' or 'capital follows' braille characters.
        """
        english_text = ""
        input_braille_blocks = [self.input_text[i : i + 6] for i in range(0, len(self.input_text), 6)]
        iterating_on_digits = False

        j = 0
        while j < len(input_braille_blocks):
            braille_block = input_braille_blocks[j]
            if braille_block == self.constants.CAPITAL_FOLLOWS:
                english_text += self.constants.BRAILLE_TO_ENGLISH_ALPHABET[input_braille_blocks[j + 1]].upper()
                j += 1
            elif braille_block == self.constants.NUMBER_FOLLOWS:
                iterating_on_digits = True
            elif iterating_on_digits:
                english_text += self.constants.BRAILLE_TO_ENGLISH_NUMBERS[braille_block]
            else:
                english_text += self.constants.BRAILLE_TO_ENGLISH_ALPHABET[braille_block]

            j += 1

        return english_text


def main():
    """
    @args None

    @returns None

    @description Runs translation by checking whether the current input_text is braille or english
    and running the corresponding conversion method accordingly before outputting result.
    """
    translator = Translator()
    if translator.is_english_text():
        print(translator.convert_english_to_braille())
    else:
        print(translator.convert_braille_to_english())


if __name__ == "__main__":
    main()
